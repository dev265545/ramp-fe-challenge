{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useEmployees() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [employees, setEmployees] = useState(null);\n  const [loadingEmployees, setLoadingEmployees] = useState(true); // new state variable to keep track of loading state\n\n  const fetchAll = useCallback(async () => {\n    setLoadingEmployees(true); // set loadingEmployees to true before making the API call\n\n    try {\n      const employeesData = await fetchWithCache(\"employees\");\n      setEmployees(employeesData);\n    } catch (error) {\n      console.error(error); // handle any errors here\n    } finally {\n      setLoadingEmployees(false); // set loadingEmployees to false after API call is complete\n    }\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setEmployees(null);\n  }, []);\n  return {\n    data: employees,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(useEmployees, \"ubN/UyZhAbl31V6x0zJUAyg4Uek=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useEmployees","fetchWithCache","loading","employees","setEmployees","loadingEmployees","setLoadingEmployees","fetchAll","employeesData","error","console","invalidateData","data"],"sources":["C:/Users/Dev/Desktop/convintassk/New folder/myproject/myapp/ramp-fe-challenge/ramp-fe-challenge/src/hooks/useEmployees.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { Employee } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { EmployeeResult } from \"./types\"\n\nexport function useEmployees(): EmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [employees, setEmployees] = useState<Employee[] | null>(null)\n    const [loadingEmployees, setLoadingEmployees] = useState(true) // new state variable to keep track of loading state\n\n    const fetchAll = useCallback(async () => {\n      setLoadingEmployees(true) // set loadingEmployees to true before making the API call\n      try {\n        const employeesData = await fetchWithCache<Employee[]>(\"employees\")\n        setEmployees(employeesData)\n      } catch (error) {\n        console.error(error) // handle any errors here\n      } finally {\n        setLoadingEmployees(false) // set loadingEmployees to false after API call is complete\n      }\n    }, [fetchWithCache])\n\n  const invalidateData = useCallback(() => {\n    setEmployees(null)\n  }, [])\n\n  return { data: employees, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,OAAO,SAASC,YAAT,GAAwC;EAAA;;EAC7C,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAoB,IAApB,CAA1C;EACE,MAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC,IAAD,CAAxD,CAH2C,CAGoB;;EAE/D,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvCS,mBAAmB,CAAC,IAAD,CAAnB,CADuC,CACb;;IAC1B,IAAI;MACF,MAAME,aAAa,GAAG,MAAMP,cAAc,CAAa,WAAb,CAA1C;MACAG,YAAY,CAACI,aAAD,CAAZ;IACD,CAHD,CAGE,OAAOC,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAcA,KAAd,EADc,CACO;IACtB,CALD,SAKU;MACRH,mBAAmB,CAAC,KAAD,CAAnB,CADQ,CACmB;IAC5B;EACF,CAV2B,EAUzB,CAACL,cAAD,CAVyB,CAA5B;EAYF,MAAMU,cAAc,GAAGd,WAAW,CAAC,MAAM;IACvCO,YAAY,CAAC,IAAD,CAAZ;EACD,CAFiC,EAE/B,EAF+B,CAAlC;EAIA,OAAO;IAAEQ,IAAI,EAAET,SAAR;IAAmBD,OAAnB;IAA4BK,QAA5B;IAAsCI;EAAtC,CAAP;AACD;;GAtBeX,Y;UACsBD,c"},"metadata":{},"sourceType":"module"}