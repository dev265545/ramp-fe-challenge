{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst EMPLOYEES_KEY = \"employees\";\nconst TRANSACTIONS_KEY = \"transactions\";\n\nfunction initData() {\n  if (!localStorage.getItem(EMPLOYEES_KEY) || !localStorage.getItem(TRANSACTIONS_KEY)) {\n    localStorage.setItem(EMPLOYEES_KEY, JSON.stringify(mockData.employees));\n    localStorage.setItem(TRANSACTIONS_KEY, JSON.stringify(mockData.transactions));\n  }\n}\n\nfunction getEmployees() {\n  initData();\n  return JSON.parse(localStorage.getItem(EMPLOYEES_KEY));\n}\n\nfunction getTransactionsPaginated(_ref) {\n  let {\n    page\n  } = _ref;\n  initData();\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n  const transactions = JSON.parse(localStorage.getItem(TRANSACTIONS_KEY));\n\n  if (start > transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: transactions.slice(start, end)\n  };\n}\n\nfunction getTransactionsByEmployee(_ref2) {\n  let {\n    employeeId\n  } = _ref2;\n  initData();\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  const transactions = JSON.parse(localStorage.getItem(TRANSACTIONS_KEY));\n  return transactions.filter(transaction => transaction.employee.id === employeeId);\n}\n\nfunction setTransactionApproval(_ref3) {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  initData();\n  const transactions = JSON.parse(localStorage.getItem(TRANSACTIONS_KEY));\n  const transactionIndex = transactions.findIndex(transaction => transaction.id === transactionId);\n\n  if (transactionIndex === -1) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transactions[transactionIndex].approved = value;\n  localStorage.setItem(TRANSACTIONS_KEY, JSON.stringify(transactions));\n}\n\nexport { getEmployees, getTransactionsPaginated, getTransactionsByEmployee, setTransactionApproval };","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","EMPLOYEES_KEY","TRANSACTIONS_KEY","initData","localStorage","getItem","setItem","JSON","stringify","employees","transactions","getEmployees","parse","getTransactionsPaginated","page","Error","start","end","length","nextPage","data","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","transactionIndex","findIndex","approved"],"sources":["C:/Users/Dev/Desktop/convintassk/New folder/myproject/myapp/ramp-fe-challenge/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 5\nconst EMPLOYEES_KEY = \"employees\"\nconst TRANSACTIONS_KEY = \"transactions\"\n\nfunction initData() {\n  if (!localStorage.getItem(EMPLOYEES_KEY) || !localStorage.getItem(TRANSACTIONS_KEY)) {\n    localStorage.setItem(EMPLOYEES_KEY, JSON.stringify(mockData.employees))\n    localStorage.setItem(TRANSACTIONS_KEY, JSON.stringify(mockData.transactions))\n  }\n}\n\nfunction getEmployees(): Employee[] {\n  initData()\n  return JSON.parse(localStorage.getItem(EMPLOYEES_KEY) as string)\n}\n\nfunction getTransactionsPaginated({ page }: PaginatedRequestParams): PaginatedResponse<Transaction[]> {\n  initData()\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  const transactions = JSON.parse(localStorage.getItem(TRANSACTIONS_KEY) as string)\n\n  if (start > transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: transactions.slice(start, end),\n  }\n}\n\nfunction getTransactionsByEmployee({ employeeId }: RequestByEmployeeParams) {\n  initData()\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  const transactions = JSON.parse(localStorage.getItem(TRANSACTIONS_KEY) as string)\n\n  return transactions.filter((transaction: Transaction) => transaction.employee.id === employeeId)\n}\n\nfunction setTransactionApproval({ transactionId, value }: SetTransactionApprovalParams): void {\n  initData()\n  const transactions = JSON.parse(localStorage.getItem(TRANSACTIONS_KEY) as string)\n  const transactionIndex = transactions.findIndex(\n    (transaction: Transaction) => transaction.id === transactionId\n  )\n\n  if (transactionIndex === -1) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transactions[transactionIndex].approved = value\n\n  localStorage.setItem(TRANSACTIONS_KEY, JSON.stringify(transactions))\n}\n\nexport { getEmployees, getTransactionsPaginated, getTransactionsByEmployee, setTransactionApproval }\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AACA,MAAMC,aAAa,GAAG,WAAtB;AACA,MAAMC,gBAAgB,GAAG,cAAzB;;AAEA,SAASC,QAAT,GAAoB;EAClB,IAAI,CAACC,YAAY,CAACC,OAAb,CAAqBJ,aAArB,CAAD,IAAwC,CAACG,YAAY,CAACC,OAAb,CAAqBH,gBAArB,CAA7C,EAAqF;IACnFE,YAAY,CAACE,OAAb,CAAqBL,aAArB,EAAoCM,IAAI,CAACC,SAAL,CAAeT,QAAQ,CAACU,SAAxB,CAApC;IACAL,YAAY,CAACE,OAAb,CAAqBJ,gBAArB,EAAuCK,IAAI,CAACC,SAAL,CAAeT,QAAQ,CAACW,YAAxB,CAAvC;EACD;AACF;;AAED,SAASC,YAAT,GAAoC;EAClCR,QAAQ;EACR,OAAOI,IAAI,CAACK,KAAL,CAAWR,YAAY,CAACC,OAAb,CAAqBJ,aAArB,CAAX,CAAP;AACD;;AAED,SAASY,wBAAT,OAAsG;EAAA,IAApE;IAAEC;EAAF,CAAoE;EACpGX,QAAQ;;EACR,IAAIW,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGd,qBAArB;EACA,MAAMiB,GAAG,GAAGD,KAAK,GAAGhB,qBAApB;EAEA,MAAMU,YAAY,GAAGH,IAAI,CAACK,KAAL,CAAWR,YAAY,CAACC,OAAb,CAAqBH,gBAArB,CAAX,CAArB;;EAEA,IAAIc,KAAK,GAAGN,YAAY,CAACQ,MAAzB,EAAiC;IAC/B,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGP,YAAY,CAACQ,MAAnB,GAA4BJ,IAAI,GAAG,CAAnC,GAAuC,IAAxD;EAEA,OAAO;IACLK,QADK;IAELC,IAAI,EAAEV,YAAY,CAACW,KAAb,CAAmBL,KAAnB,EAA0BC,GAA1B;EAFD,CAAP;AAID;;AAED,SAASK,yBAAT,QAA4E;EAAA,IAAzC;IAAEC;EAAF,CAAyC;EAC1EpB,QAAQ;;EACR,IAAI,CAACoB,UAAL,EAAiB;IACf,MAAM,IAAIR,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,MAAML,YAAY,GAAGH,IAAI,CAACK,KAAL,CAAWR,YAAY,CAACC,OAAb,CAAqBH,gBAArB,CAAX,CAArB;EAEA,OAAOQ,YAAY,CAACc,MAAb,CAAqBC,WAAD,IAA8BA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAA9E,CAAP;AACD;;AAED,SAASK,sBAAT,QAA8F;EAAA,IAA9D;IAAEC,aAAF;IAAiBC;EAAjB,CAA8D;EAC5F3B,QAAQ;EACR,MAAMO,YAAY,GAAGH,IAAI,CAACK,KAAL,CAAWR,YAAY,CAACC,OAAb,CAAqBH,gBAArB,CAAX,CAArB;EACA,MAAM6B,gBAAgB,GAAGrB,YAAY,CAACsB,SAAb,CACtBP,WAAD,IAA8BA,WAAW,CAACE,EAAZ,KAAmBE,aAD1B,CAAzB;;EAIA,IAAIE,gBAAgB,KAAK,CAAC,CAA1B,EAA6B;IAC3B,MAAM,IAAIhB,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDL,YAAY,CAACqB,gBAAD,CAAZ,CAA+BE,QAA/B,GAA0CH,KAA1C;EAEA1B,YAAY,CAACE,OAAb,CAAqBJ,gBAArB,EAAuCK,IAAI,CAACC,SAAL,CAAeE,YAAf,CAAvC;AACD;;AAED,SAASC,YAAT,EAAuBE,wBAAvB,EAAiDS,yBAAjD,EAA4EM,sBAA5E"},"metadata":{},"sourceType":"module"}