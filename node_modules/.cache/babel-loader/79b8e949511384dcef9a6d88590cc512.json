{"ast":null,"code":"import mockData from \"../mock-data.json\";\nimport { writeFile } from \"fs\";\nconst TRANSACTIONS_PER_PAGE = 5;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = _ref => {\n  let {\n    page\n  } = _ref;\n\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = _ref2 => {\n  let {\n    employeeId\n  } = _ref2;\n\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = _ref3 => {\n  let {\n    transactionId,\n    value\n  } = _ref3;\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n  data.transactions.map((transaction, index) => {\n    if (transaction.id === transactionId) {\n      data.transactions[index].approved = value;\n      writeFile(\"../mock-data.json\", JSON.stringify(data, null, 2), err => {\n        if (err) {\n          console.log(\"Failed to write updated data to file\");\n          return;\n        }\n\n        console.log(\"Updated file successfully\");\n      });\n    }\n  });\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n\n  transaction.approved = value;\n};","map":{"version":3,"names":["mockData","writeFile","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","map","index","approved","JSON","stringify","err","console","log"],"sources":["C:/Users/Dev/Desktop/convintassk/New folder/myproject/myapp/ramp-fe-challenge/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\nimport { writeFile } from \"fs\";\n\nconst TRANSACTIONS_PER_PAGE = 5\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n\n  )\n  data.transactions.map((transaction,index)=>{\n        if ( transaction.id === transactionId){\n          data.transactions[index].approved = value\n          writeFile(\"../mock-data.json\", JSON.stringify(data, null, 2), (err) => {\n            if (err) {\n              console.log(\"Failed to write updated data to file\")\n              return\n            }\n            console.log(\"Updated file successfully\")\n          })\n        }\n  })\n\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n}\n"],"mappings":"AAQA,OAAOA,QAAP,MAAqB,mBAArB;AACA,SAASC,SAAT,QAA0B,IAA1B;AAEA,MAAMC,qBAAqB,GAAG,CAA9B;AAEA,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEJ,QAAQ,CAACI,SAD+C;EAEnEC,YAAY,EAAEL,QAAQ,CAACK;AAF4C,CAArE;AAKA,OAAO,MAAMC,YAAY,GAAG,MAAkBH,IAAI,CAACC,SAA5C;AAEP,OAAO,MAAMG,wBAAwB,GAAG,QAEwB;EAAA,IAFvB;IACvCC;EADuC,CAEuB;;EAC9D,IAAIA,IAAI,KAAK,IAAb,EAAmB;IACjB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAMC,KAAK,GAAGF,IAAI,GAAGN,qBAArB;EACA,MAAMS,GAAG,GAAGD,KAAK,GAAGR,qBAApB;;EAEA,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAL,CAAkBO,MAA9B,EAAsC;IACpC,MAAM,IAAIH,KAAJ,CAAW,gBAAeD,IAAK,EAA/B,CAAN;EACD;;EAED,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAL,CAAkBO,MAAxB,GAAiCJ,IAAI,GAAG,CAAxC,GAA4C,IAA7D;EAEA,OAAO;IACLK,QADK;IAELV,IAAI,EAAEA,IAAI,CAACE,YAAL,CAAkBS,KAAlB,CAAwBJ,KAAxB,EAA+BC,GAA/B;EAFD,CAAP;AAID,CApBM;AAsBP,OAAO,MAAMI,yBAAyB,GAAG,SAA6C;EAAA,IAA5C;IAAEC;EAAF,CAA4C;;EACpF,IAAI,CAACA,UAAL,EAAiB;IACf,MAAM,IAAIP,KAAJ,CAAU,6BAAV,CAAN;EACD;;EAED,OAAON,IAAI,CAACE,YAAL,CAAkBY,MAAlB,CAA0BC,WAAD,IAAiBA,WAAW,CAACC,QAAZ,CAAqBC,EAArB,KAA4BJ,UAAtE,CAAP;AACD,CANM;AAQP,OAAO,MAAMK,sBAAsB,GAAG,SAAkE;EAAA,IAAjE;IAAEC,aAAF;IAAiBC;EAAjB,CAAiE;EACtG,MAAML,WAAW,GAAGf,IAAI,CAACE,YAAL,CAAkBmB,IAAlB,CACjBC,kBAAD,IAAwBA,kBAAkB,CAACL,EAAnB,KAA0BE,aADhC,CAApB;EAIAnB,IAAI,CAACE,YAAL,CAAkBqB,GAAlB,CAAsB,CAACR,WAAD,EAAaS,KAAb,KAAqB;IACrC,IAAKT,WAAW,CAACE,EAAZ,KAAmBE,aAAxB,EAAsC;MACpCnB,IAAI,CAACE,YAAL,CAAkBsB,KAAlB,EAAyBC,QAAzB,GAAoCL,KAApC;MACAtB,SAAS,CAAC,mBAAD,EAAsB4B,IAAI,CAACC,SAAL,CAAe3B,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAtB,EAAsD4B,GAAD,IAAS;QACrE,IAAIA,GAAJ,EAAS;UACPC,OAAO,CAACC,GAAR,CAAY,sCAAZ;UACA;QACD;;QACDD,OAAO,CAACC,GAAR,CAAY,2BAAZ;MACD,CANQ,CAAT;IAOD;EACN,CAXD;;EAcA,IAAI,CAACf,WAAL,EAAkB;IAChB,MAAM,IAAIT,KAAJ,CAAU,gCAAV,CAAN;EACD;;EAEDS,WAAW,CAACU,QAAZ,GAAuBL,KAAvB;AACD,CAxBM"},"metadata":{},"sourceType":"module"}