{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function useEmployees() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [employees, setEmployees] = useState(null);\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const fetchAll = useCallback(async () => {\n    const employeesData = await fetchWithCache(\"employees\");\n    setEmployees(employeesData);\n    setHasLoaded(true);\n  }, [fetchWithCache]);\n  const invalidateData = useCallback(() => {\n    setEmployees(null);\n    setHasLoaded(false);\n  }, []); // Only fetch employee data if it has not been loaded before\n\n  if (!hasLoaded) {\n    fetchAll();\n  }\n\n  return {\n    data: employees,\n    loading,\n    fetchAll,\n    invalidateData\n  };\n}\n\n_s(useEmployees, \"J1m1QvIVagAxAVBpPhyQGb05Uo0=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","useEmployees","fetchWithCache","loading","employees","setEmployees","hasLoaded","setHasLoaded","fetchAll","employeesData","invalidateData","data"],"sources":["C:/Users/Dev/Desktop/convintassk/New folder/myproject/myapp/ramp-fe-challenge/ramp-fe-challenge/src/hooks/useEmployees.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { Employee } from \"../utils/types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\nimport { EmployeeResult } from \"./types\"\n\nexport function useEmployees(): EmployeeResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [employees, setEmployees] = useState<Employee[] | null>(null)\n  const [hasLoaded, setHasLoaded] = useState(false)\n\n  const fetchAll = useCallback(async () => {\n    const employeesData = await fetchWithCache<Employee[]>(\"employees\")\n    setEmployees(employeesData)\n    setHasLoaded(true)\n  }, [fetchWithCache])\n\n  const invalidateData = useCallback(() => {\n    setEmployees(null)\n    setHasLoaded(false)\n  }, [])\n\n  // Only fetch employee data if it has not been loaded before\n  if (!hasLoaded) {\n    fetchAll()\n  }\n\n  return { data: employees, loading, fetchAll, invalidateData }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,OAAO,SAASC,YAAT,GAAwC;EAAA;;EAC7C,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAoB,IAApB,CAA1C;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;EAEA,MAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;IACvC,MAAMW,aAAa,GAAG,MAAMP,cAAc,CAAa,WAAb,CAA1C;IACAG,YAAY,CAACI,aAAD,CAAZ;IACAF,YAAY,CAAC,IAAD,CAAZ;EACD,CAJ2B,EAIzB,CAACL,cAAD,CAJyB,CAA5B;EAMA,MAAMQ,cAAc,GAAGZ,WAAW,CAAC,MAAM;IACvCO,YAAY,CAAC,IAAD,CAAZ;IACAE,YAAY,CAAC,KAAD,CAAZ;EACD,CAHiC,EAG/B,EAH+B,CAAlC,CAX6C,CAgB7C;;EACA,IAAI,CAACD,SAAL,EAAgB;IACdE,QAAQ;EACT;;EAED,OAAO;IAAEG,IAAI,EAAEP,SAAR;IAAmBD,OAAnB;IAA4BK,QAA5B;IAAsCE;EAAtC,CAAP;AACD;;GAtBeT,Y;UACsBD,c"},"metadata":{},"sourceType":"module"}